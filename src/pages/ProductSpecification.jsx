import React, { useState } from 'react';
import { ArrowLeft, Download, Loader, Sparkles, AlertCircle } from 'lucide-react';
import { useNavigate } from 'react-router-dom';


const ProductSpecification = () => {
  const [productName, setProductName] = useState('');
  const [specs, setSpecs] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [apiError, setApiError] = useState(false);
  const navigate = useNavigate();

  const handleFetchSpecs = async () => {
    if (!productName.trim()) {
      setError('Please enter a product name');
      return;
    }

    setLoading(true);
    setSpecs('');
    setError('');
    try {
      const response = await fetch("/api/gemini", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          model: "gemini-1.5-flash", // âœ… tell backend what model to use
          contents: [{
            parts: [{
              text: `Generate EXACTLY 10 technical specifications for "${productName}". Format as a numbered list. Keep each specification under 15 words. Focus on key technical details like dimensions, performance, connectivity, and features. Be concise and factual.`
            }]
          }],
          generationConfig: {
            maxOutputTokens: 300,
            temperature: 0.1,
            topP: 0.8,
            topK: 10
          }
        })
      });

      if (!response.ok) {
        throw new Error(`API Error: ${response.status} ${response.statusText}`);
      }

      const data = await response.json();

      if (data.error) {
        throw new Error(data.error.message || 'API request failed');
      }

      const output = data?.candidates?.[0]?.content?.parts?.[0]?.text;

      if (!output) {
        throw new Error('No specifications received from API');
      }

      // Limit to first 10 specs if more are returned
      const lines = output.split('\n').filter(line => line.trim());
      const limitedSpecs = lines.slice(0, 10).join('\n');

      setSpecs(limitedSpecs || 'No specifications available.');
    } catch (error) {
      console.error('API Error:', error);
      setError(error.message || 'Failed to fetch specifications. Please check your API key and try again.');
    } finally {
      setLoading(false);
    }
  };

  const generatePDF = () => {
    if (!specs) return;

    const htmlContent = `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <title>Product Specifications - ${productName}</title>
      <style>
        body {
          font-family: Arial, sans-serif;
          padding: 40px;
          color: #333;
          line-height: 1.6;
        }
        h1 {
          color: #007bff;
          border-bottom: 2px solid #007bff;
          padding-bottom: 10px;
        }
        .specs {
          white-space: pre-wrap;
          margin-top: 20px;
          background: #f8f9fa;
          padding: 20px;
          border-radius: 8px;
          border-left: 4px solid #007bff;
        }
        .footer {
          margin-top: 40px;
          font-size: 12px;
          color: #666;
          text-align: center;
          border-top: 1px solid #ddd;
          padding-top: 20px;
        }
      </style>
    </head>
    <body>
      <h1>ðŸ“‹ Technical Specifications: ${productName}</h1>
      <div class="specs">${specs}</div>
      <div class="footer">Generated by PingReviewer.AI using Gemini AI</div>
    </body>
    </html>
    `;

    const file = new Blob([htmlContent], { type: 'text/html' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(file);
    link.download = `${productName.replace(/\s+/g, '_')}_Specifications.html`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(link.href);
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      handleFetchSpecs();
    }
  };

  return (
    <section className="bg-gradient-to-br from-sky-400 via-purple-600 to-purple-900 min-h-screen text-white py-20 px-6 md:px-12 relative">
      {/* Back Button */}
      <div className="absolute top-6 left-6">
        <button
          onClick={() => navigate('/')}
          className="flex items-center gap-2 text-white hover:text-yellow-300 transition-colors"
        >
          <ArrowLeft className="w-5 h-5" />
          <span className="font-medium">Back</span>
        </button>
      </div>

      {/* Title */}
      <div className="max-w-4xl mx-auto text-center">
        <Sparkles className="w-10 h-10 text-yellow-300 mx-auto mb-4" />
        <h2 className="text-4xl font-bold mb-4">Product Specification Finder</h2>
        <p className="text-white/80 mb-10">
          Enter a product name to get exactly 10 concise technical specifications powered by Gemini AI.
        </p>

        {/* Input */}
        <div className="flex flex-col sm:flex-row gap-4 justify-center mb-8">
          <input
            type="text"
            placeholder="e.g., iPhone 15 Pro Max, RTX 4080, Tesla Model S"
            value={productName}
            onChange={(e) => setProductName(e.target.value)}
            onKeyPress={handleKeyPress}
            className="px-4 py-3 rounded-lg bg-white/20 text-white placeholder-white/60 w-full sm:w-96 focus:outline-none focus:ring-2 focus:ring-yellow-300"
          />
          <button
            onClick={handleFetchSpecs}
            disabled={loading || !productName.trim()}
            className="bg-yellow-400 hover:bg-yellow-500 text-black font-semibold px-6 py-3 rounded-lg transition-all disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center"
          >
            {loading ? <Loader className="w-5 h-5 animate-spin" /> : "Get Specs"}
          </button>
        </div>

        {/* Error Message */}
        {error && (
          <div className="bg-red-500/20 border border-red-400/50 rounded-lg p-4 mb-6 max-w-3xl mx-auto">
            <div className="flex items-center gap-2 text-red-200">
              <AlertCircle className="w-5 h-5" />
              <span className="font-medium">Error:</span>
            </div>
            <p className="text-red-100 mt-1">{error}</p>
          </div>
        )}

        {/* Specs Output */}
        {specs && (
          <div className="bg-white/10 border border-white/20 backdrop-blur-md rounded-xl p-6 text-left max-w-3xl mx-auto">
            <h3 className="text-xl font-bold text-yellow-300 mb-3">Technical Specifications:</h3>
            <div className="whitespace-pre-line text-white/90 mb-4 bg-black/20 rounded-lg p-4">
              {specs}
            </div>
            <button
              onClick={generatePDF}
              className="bg-amber-500 hover:bg-amber-600 text-black font-medium px-4 py-2 rounded-lg flex items-center gap-2 transition-colors"
            >
              <Download className="w-4 h-4" />
              Download as PDF
            </button>
          </div>
        )}

        {/* API Key Notice */}
        {apiError && (
          <div className="bg-orange-500/20 border border-orange-400/50 rounded-lg p-4 mt-8 max-w-3xl mx-auto">
            <div className="flex items-center gap-2 text-orange-200 mb-2">
              <AlertCircle className="w-5 h-5" />
              <span className="font-medium">Setup Required</span>
            </div>
            <p className="text-orange-100 text-sm">
              Could not reach Gemini API. Please check your setup or contact support.
            </p>
          </div>
        )}
      </div>
    </section>
  );
};

export default ProductSpecification;